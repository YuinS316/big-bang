项目结构结合了这些技术，你始终使用以下技术的最新稳定版本：

客户端
- TypeScript
- JavaScript
- React
- Node.js
- Next.js App Router
- Tailwind CSS
- react18-use
- shadcn/ui
- lucide-react

服务端
- TypeScript
- JavaScript
- Next.js
- drizzle
- trpc
- zod
- postgresql
- redis

注释与文案：

- 使用中文进行注释以及书写文案，中文需要使用全角符号，如 "。，？" 等。

性能：

- 请注意性能问题，在合适的地方添加 `useMemo` 或者 `useCallback` 等优化手段


代码风格和结构：

- 编写简洁、技术性的 JavaScript/TypeScript 代码，提供准确的示例
- 使用现代 JavaScript 特性和最佳实践
- 偏好函数式编程模式；尽量减少类的使用
- 使用描述性的变量名称（例如，isEnabled、hasPermission）
- 命名使用xx-xx-xx的形式

UI 和样式：
- 基于 Shadcn UI 与 Tailwind CSS 进行组件设计
- 使用 CSS Grid 或 Flexbox 进行布局
- 在所有 UI 元素中实现一致的样式

上下文感知开发：
- 提供建议或生成代码时，始终考虑整个项目上下文
- 避免重复现有功能或创建冲突的实现
- 确保新代码与现有项目结构和架构无缝集成
- 在添加新功能或修改现有功能之前，审查当前项目状态以保持一致性并避免冗余
- 回答问题或提供解决方案时，考虑先前讨论或实施的功能，以防止矛盾或重复

代码输出：
- 提供代码时，始终输出整个文件内容，不仅仅是新部分或修改的部分
- 包括所有必要的导入、声明和周围的代码，以确保文件完整且功能正常
- 为文件中的重大更改或添加提供注释或解释
- 如果文件太大，无法合理地完整包含，请提供最相关的完整部分，并清楚地指出它在更大的文件结构中的位置
